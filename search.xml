<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringIOC详解</title>
      <link href="/2024/06/07/Spring-IOC/"/>
      <url>/2024/06/07/Spring-IOC/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是组件？"><a href="#什么是组件？" class="headerlink" title="什么是组件？"></a>什么是组件？</h2><p>在了解IOC之前，首先需要知道，什么是组件，组件可以理解为Java对象，不过这些Java对象是可以复用的功能性的Java对象。在我们写web项目的时候，controller层、service层、mapper层都可以作为组件。也就是整个项目就是由各种组件搭建起来的。<br><img src="/2024/06/07/Spring-IOC/1717754999330-544be2b8-af8d-4511-bb1f-67eafe178eb3.png" alt="img"></p><h2 id="为什么要引入IOC的思想？"><a href="#为什么要引入IOC的思想？" class="headerlink" title="为什么要引入IOC的思想？"></a>为什么要引入IOC的思想？</h2><p>想象一下传统的实例化对象的方式，通过在Java代码中自己手动new对象，自己保存对象，并且手动维护对象之间的依赖关系，无法专注于业务代码的开发，因此就想着能不能我不自己手动创建组件，而是交给IOC容器，让它帮我们管理组件，包括组件的实例化、组件的创建、销毁、组件之间的依赖关系、组件的生命周期等等。。。</p><h2 id="什么是IOC？"><a href="#什么是IOC？" class="headerlink" title="什么是IOC？"></a>什么是IOC？</h2><p>ioc是Inversion of Control的缩写，意思是”反转控制“，也就是说，把我们自己实例化对象，自己给对象属性赋值，管理对象的控制权，交给IOC容器去管理，我们把组件添加到容器中，之后需要什么组件，就从容器中注入到我们需要的地方，不需要自己去创建。</p><h2 id="组件交给IOC容器有什么优势？"><a href="#组件交给IOC容器有什么优势？" class="headerlink" title="组件交给IOC容器有什么优势？"></a>组件交给IOC容器有什么优势？</h2><ol><li>首先降低了组件之间的耦合性：所有的组件相互之间不再是附属关系，而是变成了合作关系，组件A需要组件B，只需要告诉容器，就可以通过依赖注入，使用B组件，实现了组件之间的低耦合。</li><li>提高代码的复用性和可维护性：因为组件的实例化和管理等工作都是交给IOC容器来管理，我们只是使用组件，所以提高代码的可重用和模块化。</li><li>提高组件的可扩展性：因为Spring框架还提供了其他的一些功能，当我们把组件交给IOC容器管理后，组件也可以使用Spring提供的其他功能。</li></ol><h2 id="怎么把组件交给IOC容器管理（IOC怎么用）？"><a href="#怎么把组件交给IOC容器管理（IOC怎么用）？" class="headerlink" title="怎么把组件交给IOC容器管理（IOC怎么用）？"></a>怎么把组件交给IOC容器管理（IOC怎么用）？</h2><blockquote><p>想要把组件交给IOC容器管理，首先需要<strong>配置元信息，</strong>这个元信息就是告诉SpringIOC容器，我想把哪些Java对象加入到ioc容器中，以及这些Java对象之间的依赖关系是怎么样的。<br>之后就是<strong>实例化容器，</strong>根据配置的元信息，实例化一个容器，用来管理bean组件<br>最后就是<strong>获取bean组件</strong></p></blockquote><p><img src="/2024/06/07/Spring-IOC/image-20240607203113660.png" alt="image-20240607203113660"><br>Spring提供了3种配置元信息的方式</p><ol><li>基于XML的方式（现在很少用）</li><li>基于注解的方式(常用)</li><li>基于配置类的方式（重要）<br>:::</li></ol><h3 id="1-基于XML的方式（了解）"><a href="#1-基于XML的方式（了解）" class="headerlink" title="1.基于XML的方式（了解）"></a>1.基于XML的方式（了解）</h3><p>基于XML的配置元数据的基本结构如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处要添加一些约束，配置文件的标签并不是随意命名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">  https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> [<span class="attr">1</span>] <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> [<span class="attr">2</span>]&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是通过在配置文件在添加<bean></bean>的方式来管理组件<br><strong>bean标签</strong>：告诉IOC需要创建的组件的信息，也就是交给IOC容器管理的对象<br><strong>id</strong>：它是bean的唯一标识，之后我们想要获取这个bean，就可以通过bean的id来获取<br><strong>class</strong>：组件类的全限定符，既然bean组件就是Java对象，那么对象肯定有它所属的类，使用class可以对组件进行一个类型限定。</p><hr><p>当一个组件需要使用到另一个组件的功能的时候，可以通过<strong>依赖注入</strong>的方式，来把所需的组件，注入到当前的组件中。常用的组件主要方式有2种：基于<strong>构造函数</strong>的依赖注入、基于<strong>setter方法</strong>的依赖注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引用类bean声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserService&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 构造函数引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>constructor-arg标签：name属性指定参数名、index属性指定参数角标、value属性指定普通属性值、ref属性指定引用属性，通过ref，可以指向别的bean组件，实现依赖的注入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleMovieLister&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.SimpleMovieLister&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- setter方法，注入movieFinder对象的标识id</span></span><br><span class="line"><span class="comment">       name = 属性名  ref = 引用bean的id值</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;movieFinder&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;movieFinder&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- setter方法，注入基本数据类型movieName</span></span><br><span class="line"><span class="comment">       name = 属性名 value= 基本类型值</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;movieName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;消失的她&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;movieFinder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.MovieFinder&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>property标签：可以给setter方法对应的属性赋值，其中name&#x3D;属性名、value&#x3D;基本数据类型、ref&#x3D;引用数据类型。</p></li></ul><h3 id="2-基于注解的方式"><a href="#2-基于注解的方式" class="headerlink" title="2.基于注解的方式"></a>2.基于注解的方式</h3><p>Spring中提供了多个注解，可以把这些注解标注在Java类上，来把它们定义为Spring Bean。</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>这是一个通用组件，只是标识它是容器中的一个组件</td></tr><tr><td>@Controller</td><td>表示这是一个控制层组件，该组件标识的类主要负责请求的接收和响应</td></tr><tr><td>@Service</td><td>表示这是一个业务层组件，该组件标识的类主要负责处理具体的业务</td></tr><tr><td>@Repository</td><td>表示这是一个数据访问层组件，该组件标识的类主要负责与数据库的交互</td></tr></tbody></table><p>需要注意：用这些组件标识的类只是表示它们把它们交给IOC容器管理，但是真正加入IOC容器还需要经过扫描，也就是component-scan，所以<strong>注解+扫描</strong>需要配合使用。<br>扫描方式有两种：XML方式（了解）、注解方式（常用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解方式：<code>@ComponentScan()</code><br>基于注解方式的依赖注入，主要有两个：<code>@Autowired</code>和<code>@Resource</code><br>@AutoWired工作原理</p><ol><li>首先根据所需的组件类型到IOC容器中查找<ol><li>能够找到唯一的bean：直接执行装配</li><li>完全找不到这个类型的bean：装配失败</li><li>所需类型匹配的bean不止一个<ol><li>没有@Qualifier注解：根据@AutoWired标记位置成员变量的变量名作为bean的id进行匹配<ol><li>如果匹配成功：执行装配</li><li>没有匹配成功：装配失败</li></ol></li><li>有@Qualifier注解：根据该注解指定的名称作为bean的id进行匹配<ol><li>能找到：执行装配</li><li>找不到：装配失败</li></ol></li></ol></li></ol></li></ol><p>@Resource注解：默认根据bean名称装配，如果没有指定名称，使用属性名作为名称，如果通过名称找不到的化会自动通过类型装配。</p><p>:::<br>两者有什么区别？</p><ol><li>来源：@AutoWired注解是Spring框架的，@Resource注解是JDK扩展包中的</li><li>匹配顺序：@AutoWired注解优先通过类型匹配，匹配不到再通过id匹配，@Resource注解优先通过id匹配，匹配不到再通过类型匹配</li><li>作用范围：@AutoWired注解可以用在属性、setter方法、构造方法、构造方法参数上。@Resource注解只能用在属性和setter方法上。</li></ol><p>除了这两个注入方法外，还有一个注解也比较常用，<code>@Value</code>，这个注解主要用于访问外部属性，比如访问配置文件中的属性。</p><h3 id="3-基于配置类的方式"><a href="#3-基于配置类的方式" class="headerlink" title="3.基于配置类的方式"></a>3.基于配置类的方式</h3><p>通过编写一个配置类，使用@Configuration和@Bean的方式，定义组件,这种方式通常用于定义一些第三方工具的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标注当前类是配置类，替代application.xml    </span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//使用注解读取外部配置，替代 &lt;context:property-placeholder标签</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:application.properties&quot;)</span></span><br><span class="line"><span class="comment">//使用@ComponentScan注解,可以配置扫描包,替代&lt;context:component-scan标签</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.stufz.components&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类的注入方式，可以在一个<code>@Bean</code>方法中，直接调用其他<code>@Bean</code>方法来获取Bean实例，也可以通过在参数中传递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HappyMachine <span class="title function_">happyMachine</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HappyMachine</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HappyComponent <span class="title function_">happyComponent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HappyComponent</span>();</span><br><span class="line">        <span class="comment">//直接调用方法即可! </span></span><br><span class="line">        happyComponent.setHappyMachine(happyMachine());</span><br><span class="line">        <span class="keyword">return</span> happyComponent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HappyComponent <span class="title function_">happyComponent</span><span class="params">(HappyMachine happyMachine)</span>&#123;</span><br><span class="line">        <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HappyComponent</span>();</span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        happyComponent.setHappyMachine(happyMachine);</span><br><span class="line">        <span class="keyword">return</span> happyComponent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件的生命周期和作用域"><a href="#组件的生命周期和作用域" class="headerlink" title="组件的生命周期和作用域"></a>组件的生命周期和作用域</h2><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><ol><li>Spring容器创建对象</li><li>执行init方法（可以使用<code>@PostConstruct</code>注解来指定初始化方法）</li><li>调用自己的业务方法</li><li>当spring容器关闭的时候执行destroy方法（可以使用<code>PreDestory</code>注解来指定销毁方法）</li></ol><h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>是否为默认值</th></tr></thead><tbody><tr><td>singleton</td><td>在IOC容器中，这个bean对象始终为单例</td><td>IOC容器初始化的时候</td><td>是</td></tr><tr><td>protoType</td><td>这个bean在IOC容器中有多个实例</td><td>获取bean时</td><td>否</td></tr><tr><td>request</td><td>在一个请求范围内有效</td><td>每次请求</td><td>否</td></tr><tr><td>session</td><td>在一个会话范围内有效</td><td>每次会话</td><td>否</td></tr></tbody></table><p>可以使用<code>@Scope</code>注解来指定bean的作用域。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> ioc </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList扩容机制</title>
      <link href="/2024/06/04/ArrayList%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/06/04/ArrayList%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h2><p>首先看一下ArrayList的三种初始化方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认初始容量大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认构造函数，使用初始容量10构造一个空列表(无参数构造)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带初始容量参数的构造函数。（用户自己指定容量）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;<span class="comment">//初始容量大于0</span></span><br><span class="line">    <span class="comment">//创建initialCapacity大小的数组</span></span><br><span class="line">    <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;<span class="comment">//初始容量等于0</span></span><br><span class="line">    <span class="comment">//创建空数组</span></span><br><span class="line">    <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//初始容量小于0，抛出异常</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span> + initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回</span></span><br><span class="line"><span class="comment"> *如果指定的集合为null，throws NullPointerException。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有一个默认的容器大小为10，还有一个空数组elementData用来存放集合的元素。<br>ArrayList()一共提供了三种初始化方法</p><ol><li><p>默认无参的初始化方法：<strong>这种方法会给elementData赋一个空数组，添加元素的时候，才会真正扩容来存放元素，即向数组中添加第一个元素时，数组容器扩为10</strong></p></li><li><p>带初始容量参数的构造函数：这种方法给构造器传一个初始化参数，表示想创建容器元素的个数，之后会比较该参数是否大于0</p><ol><li>如果大于0，就会创建一个该参数大小的数组，并把它赋给elementData</li><li>如果等于0，就会赋一个空数组</li><li>如果小于0，就会报异常</li></ol></li><li><p>带collection元素的构造函数（用的少）：这种方法会给构造器传一个集合，首先会把该集合转化为数组，之后判断该数组长度是否为0</p><ol><li>如果等于0：则直接创建一个空数组，赋给elementData</li><li>如果不等于0：那么会判断该数组的类类型是否为Object[].class（因为toArray()方法不一定会返回Object[]类型的集合）</li></ol></li></ol><h2 id="使用add-方法来添加元素"><a href="#使用add-方法来添加元素" class="headerlink" title="使用add()方法来添加元素"></a>使用add()方法来添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将指定的元素追加到此列表的末尾。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="comment">// 加元素之前，先调用ensureCapacityInternal方法</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 这里看到ArrayList添加元素的实质就相当于为数组赋值</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先会调用<code>ensureCapacityInternal</code>方法，之后给elementData数组赋值，</p><p>那么<code>ensureCapacityInternal</code>方法是干嘛的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确保内部容量达到指定的最小容量。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它是确保内部容量达到了指定的最小容量，也就是说，当给该方法传入size+1时，就表示判断我容器中还能不能再添加一个元素，如果能，我就把元素添加进来。</p><p>那么<code>calculateCapacity</code>方法是干什么的？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据给定的最小容量和当前数组元素来计算所需容量。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果当前数组元素为空数组（初始情况），返回默认容量和最小容量中的较大值作为所需容量</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则直接返回最小容量</span></span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法计算添加元素所需容器大小（总的容器大小，不只是这次添加的元素个数），如果elementData为空数组，如果所需容器大小小于10，就返回10，如果大于10，就返回所需容器，如果当前数组不为空数组，就返回所需容器大小。<strong>总之，这个方法要么返回10（只在刚开始往数组中添加元素），要么返回所需容器大小。</strong><br>计算出所需容器大小后，就要判断我现在的数组大小够不够满足所需容器大小，当不满足时，就需要扩容<code>ensureExplictCapacity</code>方法就是用来判断是否需要扩容的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//判断当前数组容量是否足以存储minCapacity个元素</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//调用grow方法进行扩容</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果所需容器大小大于当前容器容量的话，就需要调用<code>grow</code>方法来扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要分配的最大数组大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ArrayList扩容的核心方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">// 将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">    <span class="comment">// 我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，</span></span><br><span class="line">    <span class="comment">// 如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个方法中，我们可以看到，<strong>Aarraylist每次扩容之后容量都会变成原来的1.5倍左右，如果是偶数，就是1.5被，如果是奇数，丢弃小数。</strong></p><p>2个变量</p><ul><li>旧容器：原先容器大小</li><li>新容器：扩容为原先容器1.5倍大小</li></ul><p>两个判断</p><ul><li>判断新容器是否满足最小需要容器，如果不满足，把最小需要容器赋给新容器</li><li>判断新容器大小是否超出最大容器限制：如果超出，就判断最大数组长度是否满足所需数组长度，如果满足，把最大数组长度赋给新容器，否则，把整型的最大值赋给新容器。</li></ul><blockquote><p>这里有个点需要注意：定义的MAX_ARRAY_SIZE是Integer_MAX_VALUE-8</p><p>之所以要-8是因为数组需要8字节去存储它自己的大小，防止在分配较大数组时造成内存溢出。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="comment">// 对minCapacity和MAX_ARRAY_SIZE进行比较</span></span><br><span class="line">    <span class="comment">// 若minCapacity大，将Integer.MAX_VALUE作为新数组的大小</span></span><br><span class="line">    <span class="comment">// 若MAX_ARRAY_SIZE大，将MAX_ARRAY_SIZE作为新数组的大小</span></span><br><span class="line">    <span class="comment">// MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>举一个例子来说明扩容机制</strong></p><ol><li><strong>当我用无参构造函数创建一个ArrayList()列表时，此时elementData数组为{},容量size为0</strong></li><li><strong>当调用add()方法，往里面添加一个元素，首先会调用ensureCapacityInternal方法来判断当前的内部容器是否满足size+1,也就是1，</strong></li><li><strong>之后就会调用ensureExplictCapacity方法来判断当前容器是否需要扩容，首先它会计算当前所需的容器大小，（计算的规则就是如果我添加元素小于10，就返回10，这个10是ArrayList定义的默认的初始容器大小）因为我需要的容器大小是1，小于10，就返回10，ensureExplictCapacity方法就会基于这个10判断，当前容器大小大不大于10，如果比10小，就调用grow方法来进行扩容</strong></li><li><strong>grow方法中会定义两个变量，一个是旧容量，一个是新容量，旧容量就是当前容器的大小，新容量是当前容器的容量加上当前容器右移一位（也就是除以2的容量），即扩容为原来的1.5倍，因为原先容量为0，所以扩容后容量还是0</strong></li><li><strong>之后就会判断这个新容量满不满足所需的容量，也就是10，如果不满足，就把所需容量赋给新容量，所以这个时候新容量就为10，</strong></li><li><strong>之后会判断这个新容器是否超出了最大数组长度，因为没有超过，所以，就调用Arrays.copyOf()方法把数据拷贝到新容器当中。</strong></li><li><strong>之后再添加第2.3.4..个元素的时候，初始容器10都满足，所以不会发生扩容，</strong></li><li><strong>当添加第11个元素的时候，这个时候所需容器大于了数组长度，所以调用grow扩容为15.</strong></li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ArrayList </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/04/hello-world/"/>
      <url>/2024/06/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movie/index.html"/>
      <url>/movie/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>photos</title>
      <link href="/photos/index.html"/>
      <url>/photos/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
